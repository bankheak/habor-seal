pbinom(32,80,0.18)
1-pbinom(18,80,0.18)
pnorm(4,15,10)
1-pchisq(18,4)
ppois(18,8)-ppois(4,8)
ppois(4,8)-ppois(18,8)
1-punif(18,0,34.6)
pchisq(5.6088,1)
1-pchisq(5.6088,1)
ox.data<-data.frame(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0))
View(ox.data)
summary(ox.data)
ox.data<-data.frame(Level=c("High","Med","Low"),Ox.con=c(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0)))
fit_lm<-lm(Ox.con~Level,data=ox.data)
anova(fit_lm)
oxy.data<-read.csv(Book1)
oxy.data<-read.csv("Book1")
library(readr)
Book1 <- read_csv("Homework/Book1.csv")
View(Book1)
View(ox.data)
ox.data<-data.frame(Ox.con=c(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0)))
ox.data<-data.frame(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0))
str(ox.data)
ox.data<-data.frame(Level=c("High","Med","Low"),High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0))
1-pchisq(0.5143,1)
1-ppois(6,4)
dpois(2,4)
ppois(7,4)
s1<-c(40, 82, 45, 68, 42, 36, 64, 89, 71, 68)
s2<-c(23, 41, 34, 76, 32, 56, 63, 49, 51, 44)
(twoSampleData <- data.frame(Sample1 = s1, Sample2 = s2))
mean1 <- mean(twoSampleData$Sample1)
mean2 <- mean(twoSampleData$Sample2)
pooledVar <- (sum((twoSampleData$Sample1-mean1)^2) + sum((twoSampleData$Sample2-mean2)^2))/(length(twoSampleData$Sample1) + length(twoSampleData$Sample2) - 2)
pooledSE <- sqrt(pooledVar/length(twoSampleData$Sample1) + pooledVar/length(twoSampleData$Sample2))
(tTwoSample <- (mean1 - mean2)/pooledSE)
1-pt(1.768,18)
2*pt(12.3,4)
1-pt(2.3,18)
1-pf(2,18,4)
sample<-rep(c("High","Med","Low"),each=5)
ox.data<-c(12.2,8.4,12,17.9,7.3,26.4,21.7,6.0,16.2,18.0,17.5,9.1,18.1,28.7,4.0)
(threeSampleData<-data.frame(Sample=sample,Data=ox.data))
fit_lm<-lm(ox.data~sample,data=threeSampleData)
anova(fit_lm)
plot(ox.data~sample,data=threeSampleData)
boxplot(ox.data~sample,data=threeSampleData)
boxplot(ox.data~sample,data=threeSampleData)
alc.data<-data.frame(Predictor=c(10,20,30,40,50,60),Response=c(-1.7447,-1.824,-1.7696,-1.553,-1.377,-1.194))
fit<-lm(Response~Predictor,data=alc.data)
summary(fit)
fit$coefficients
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
sd_noise<-5
nobs<-100    # number of observations
slope<-0.1
intercept<--1
sd_noise<-5
predictor<-seq(0,100,length.out=nobs)
noise<-rnorm(nobs,mean=0,sd=sd_noise)
response<-intercept+slope*predictor+noise
plot(response,predictor)
plot(predictor,response)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
dat<-data.frame(predictor=predictor,
response=response)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
fit<-glm(response~predictor, data = dat)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
plot(predictor, response)
abline(fit)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
predictor<-runif(n = nobs,0,100)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
predictor<-runif(n = nobs,0,100)
dat<-data.frame(predictor=predictor,
response=response)
pred <- predict(fit, newdata = dat)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
# Remove all variables
rm(list=ls())
## load all necessary packages
install.packages("devtools")
install_github("whoppitt/NBDA")
require(devtools)
## load all necessary packages
require(rmarkdown)  # “Knit” button (Ctrl+Shift+K) displays preview
install.packages("microbenchmark")
install.packages("parallel")
install.packages("doParallel")
install.packages("foreach")
# Upload packages
require(ggplot2)
require(microbenchmark)
require(parallel)
require(doParallel)
require(foreach)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1) # for reproducibility
geom_growth_base <- function(N0 = 2,
T = 999,
lambda = 1.01,
sigma = 0.2){
Nvals <- vector('numeric') # initiate a place to put the values
Nvals[1] <- N0
for (t in 1:T){
Nvals[t+1] <- Nvals[t]*(lambda*exp(rnorm(1,0,sigma)))
}
return(Nvals)
}
# Run the simulation
out <- geom_growth_base()
# Plot the results
plot(0:999,
out,
xlab='Time',
ylab='Population size',
type='o')
```{r}
# Default number of time-points
start_time <- Sys.time()
out <- geom_growth_base()
end_time <- Sys.time()
end_time - start_time
# Repeat with greater number of time-points
start_time <- Sys.time()
out <- geom_growth_base(T = 9E5)
out <- geom_growth_base(T = 9E5)
end_time <- Sys.time()
end_time <- Sys.time()
end_time - start_time
# Note that the time won't be exactly the same each time (unless the seed is the same)
start_time <- Sys.time()
out <- geom_growth_base(T = 9E5)
out <- geom_growth_base(T = 9E5)
end_time <- Sys.time()
end_time - start_time
system.time(geom_growth_base(T=9E5))
comp <- microbenchmark(TS_009 = {geom_growth_base(T = 9)},
TS_099 = {geom_growth_base(T = 99)},
TS_999 = {geom_growth_base(T = 999)})
comp
autoplot(comp)
set.seed(1) # for reproducibility
geom_growth_preallocated <- function(N0 = 2,
T = 999,
lambda = 1.01,
sigma = 0.2){
Nvals <- vector('numeric', length = T+1) # here's the only change
Nvals[1] <- N0
for (i in 1:T){
Nvals[i+1] <- Nvals[i]*(lambda*exp(rnorm(1,0,sigma)))
}
return(Nvals)
}
# Compare the old and new simulation functions
comp <- microbenchmark(Old = {geom_growth_base(T = 9999)},
New = {geom_growth_preallocated(T = 9999)})
comp
\subsection{Progress bar}
\subsection{Progress bar}
data <- geom_growth_preallocated(T = 99999)
start_time <- Sys.time()
growth_rates <- vector('numeric', (length(data)-1))
for(i in 1:(length(data)-1)){
growth_rates[i] <- data[i+1] / data[i]
}
end_time <- Sys.time()
end_time-start_time
start_time <- Sys.time()
growth_rates <- data[-1] / data[-length(data)]
end_time <- Sys.time()
end_time-start_time
n <- 5 # number of time-series to create
# use replicate() to create n time-series, each in a different matrix column
dat_array <- replicate(n, geom_growth_preallocated(T = 9999))
colnames(dat_array) <- paste0('Site_', 1:n)
head(dat_array)
calc_growth_rates <- function(x){
gr <- x[-1] / x[-length(x)]
return(gr)
}
system.time({
apply(dat_array, 2, calc_growth_rates)
})
dat_list <- as.list(as.data.frame(dat_array))
system.time({
growth_rates <- lapply(dat_list, calc_growth_rates)
})
lapply(growth_rates, head) # look only at head of each list element
growth_rate_means <- lapply( lapply(dat_list, calc_growth_rates), mean)
growth_rate_means
unlist(growth_rate_means)
growth_rate_means <- lapply( lapply(dat_list, calc_growth_rates), mean)
growth_rate_means
unlist(growth_rate_means)
sapply( lapply(dat_list, calc_growth_rates), mean)
The function \texttt{mapply} is useful when you want to parameterize a function from multiple vectors.
# Generate a large amount of demonstration data
n <- 1E8
data_list <- list("A" = rnorm(n),
"B" = rnorm(n),
"C" = rnorm(n),
"D" = rnorm(n))
data_list <- list("A" = rnorm(n),
"B" = rnorm(n),
"C" = rnorm(n),
"D" = rnorm(n))
detectCores()
cores <- 2
cl <- makeCluster(cores) # Create cluster
registerDoParallel(cl) # Activate clusters
system.time({
means <- foreach(i = 1:length(data_list),
.combine = c) %dopar% {
# replace c with rbind to create a dataframe
mean(data_list[[i]])
}
})
detectcores()
detect.cores()
summaryRprof()
detectCores()
# Set working directory here
setwd("C:/Users/bankh/My_Repos/habor-seal/data")
# Retrieve data
m.data<-read.csv("m.data.csv")
w.data<-read.csv("w.data.csv")
require(MASS) #for glm.nb()
# Combine location avg noise and total seals within dates
new.w.data<-read.csv("new.w.data.csv")
# Fix date
new.w.data$date<-as.Date(as.character(new.w.data$date),format = "%m/%d/%Y")
m.data$date<-as.Date(as.character(m.data$date),format = "%m/%d/%Y")
# Merge data
full.data<-merge(new.w.data,m.data,all = T)
# Run pairwise cor between all independent variables
## Cut-off is +/- 0.7
cor.matrix<-cor(full.data[,c(2:4,6:7)])
# Keep only large correlations in the same model
cor.matrix[abs(cor.matrix)< 0.7]<-NA
cor.matrix
# Check distribution
ggplot(full.data, aes(x=seals)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density()+stat_density(alpha=.2,adjust = 1, fill="#FF6666")+xlab("Number of Seals Hauled-out")+ylab("Density")+theme(panel.background = element_blank())
require(ggplot2)
# Check distribution
ggplot(full.data, aes(x=seals)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density()+stat_density(alpha=.2,adjust = 1, fill="#FF6666")+xlab("Number of Seals Hauled-out")+ylab("Density")+theme(panel.background = element_blank())
# Check GLM
model1<- glm.nb(seals ~ ., data = full.data)
summary(model1) #everything is significant
# Check GLM
model1<- glm.nb(seals ~ 1, data = full.data)
summary(model1) #everything is significant
View(full.data)
model1<- glm.nb(seals ~ site*noise + month + tide + time, data = full.data)
model2<- glm.nb(seals ~ site*noise + month + tide + time, data = full.data)
model2<- glm.nb(seals ~ site*noise + month + tide + time, data = full.data)
summary(model2) #everything is significant
model3<- glm.nb(seals ~ site*noise + month + time, data = full.data)
summary(model3) #everything is significant
model4<- glm.nb(seals ~ site*noise + month, data = full.data)
summary(model4) #everything is significant
## Calculate AICc with glm of models
### Model 1
aic = model1$aic
n = length(model1$fitted)
K = model1$rank + 1
AIC.c <- aic + (2*K*(K+1))/(n-K-1)
mod1.sel = c(n,K,AIC.c)
### Model 2
aic = model2$aic
n = length(model2$fitted)
K = model2$rank + 1
AIC.c <- aic + (2*K*(K+1))/(n-K-1)
mod2.sel = c(n,K,AIC.c)
### Model 3
aic = model3$aic
n = length(model3$fitted)
K = model3$rank + 1
AIC.c <- aic + (2*K*(K+1))/(n-K-1)
mod3.sel = c(n,K,AIC.c)
### Model 4
aic = model4$aic
n = length(model4$fitted)
K = model4$rank + 1
AIC.c <- aic + (2*K*(K+1))/(n-K-1)
mod4.sel = c(n,K,AIC.c)
## Combine AICc for models
rbind(mod1.sel,mod2.sel,mod3.sel,mod4.sel)
colnames(AIC.table)<- c("N","df","AICc")
## Combine AICc for models
AIC.table<-rbind(mod1.sel,mod2.sel,mod3.sel,mod4.sel)
colnames(AIC.table)<- c("N","df","AICc")
AIC.table
model4<- glm.nb(seals ~ site*noise, data = full.data)
summary(model4)
## Calculate AICc with glm of models
### Model 1
aic = model1$aic
n = length(model1$fitted)
K = model1$rank + 1
AIC.c <- aic + (2*K*(K+1))/(n-K-1)
mod1.sel = c(n,K,AIC.c)
### Model 2
aic = model2$aic
n = length(model2$fitted)
K = model2$rank + 1
AIC.c <- aic + (2*K*(K+1))/(n-K-1)
mod2.sel = c(n,K,AIC.c)
### Model 3
aic = model3$aic
n = length(model3$fitted)
K = model3$rank + 1
AIC.c <- aic + (2*K*(K+1))/(n-K-1)
mod3.sel = c(n,K,AIC.c)
### Model 4
aic = model4$aic
n = length(model4$fitted)
K = model4$rank + 1
AIC.c <- aic + (2*K*(K+1))/(n-K-1)
mod4.sel = c(n,K,AIC.c)
## Combine AICc for models
AIC.table<-rbind(mod1.sel,mod2.sel,mod3.sel,mod4.sel)
colnames(AIC.table)<- c("N","df","AICc")
AIC.table
rownames(AIC.table)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
AIC.table
list(model1,mode2,model3,model4)
models<-list(model1,model2,model3,model4)
models
length(models)
models[1]
models
# Check GLM
model1<- glm.nb(seals ~ 1, data = full.data)
model2<- glm.nb(seals ~ site*noise + month + tide + time, data = full.data)
model3<- glm.nb(seals ~ site*noise + month + time, data = full.data)
model4<- glm.nb(seals ~ site*noise + month, data = full.data)
models<-list(model1,model2,model3,model4)
models
## Calculate AICc with glm of models
sum.table = c() # Make a place for summary table
for(i in 1:4) {
sum.table<-
rbind(c(length(models[i]$fitted, models[i]$rank + 1, models[i]$aic + (2*K*(K+1))/(n-K-1))))
}
length(models[1]$fitted)
length(model1$fitted)
models[1]
models[1]$fitted
model1$fitted
models<-c(model1,model2,model3,model4)
models[1]$fitted
length(models[1]$fitted)
models
models<-list(model1, model2, model3, model4)
models
length(models[[1]]$fitted)
## Calculate AICc with glm of models
sum.table = c() # Make a place for summary table
for(i in 1:4) {
sum.table<-
rbind(c(length(models[[i]]$fitted, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1))))
}
colnames(AIC.table)<- c("N","df","AICc")
rownames(AIC.table)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
## Calculate AICc with glm of models
AIC.table = c() # Make a place for summary table
for(i in 1:4) {
AIC.table<-
rbind(c(length(models[[i]]$fitted, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1))))
}
length(model[[1]]$fitted)
length(models[[1]]$fitted)
models[[1]]$rank + 1
model1$rank + 1
models[[1]]$aic + (2*K*(K+1))/(n-K-1))
models[[1]]$aic + (2*K*(K+1))/(n-K-1)
aic = model1$aic
n = length(model1$fitted)
K = model1$rank + 1
AIC.c <- aic + (2*K*(K+1))/(n-K-1)
aic + (2*K*(K+1))/(n-K-1)
## Calculate AICc with glm of models
AIC.table = c() # Make a place for summary table
for(i in 1:4) {
AIC.table<-
rbind(c(length(models[[i]]$fitted, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1))))
}
length(models[[2]]$fitted)
length(models[[3]]$fitted)
length(models[[4]]$fitted)
for(i in 1:4) {
AIC.table<-
rbind(c(length(models[[i]]$fitted, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1))))
}
## Calculate AICc with glm of models
AIC.table = c() # Make a place for summary table
for(i in 1:4) {
AIC.table<-
rbind(c(155, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1)))
}
colnames(AIC.table)<- c("N","df","AICc")
rownames(AIC.table)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
AIC.table
## Calculate AICc with glm of models
AIC.table = c() # Make a place for summary table
for(i in 1:4) {
AIC.table<-
rbind(sum.table, c(length(models[[i]]$fitted, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1))))
}
for(i in 1:4) {
AIC.table<-
rbind(sum.table, c(155, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1))))
for(i in 1:4) {
AIC.table<-
rbind(sum.table, c(155, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1)))
}
colnames(AIC.table)<- c("N","df","AICc")
rownames(AIC.table)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
AIC.table
## Calculate AICc with glm of models
AIC.table = c() # Make a place for summary table
for(i in 1:4) {
AIC.table<-
rbind(AIC.table, c(length(models[[i]]$fitted, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1))))
}
## Calculate AICc with glm of models
AIC.table = c() # Make a place for summary table
for(i in 1:4) {
AIC.table<-
rbind(AIC.table, c(155, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1)))
}
colnames(AIC.table)<- c("N","df","AICc")
rownames(AIC.table)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
AIC.table
## Calculate AICc with glm of models
n = length(models[[1]]$fitted)
AIC.table = c() # Make a place for summary table
for(i in 1:4) {
AIC.table<-
rbind(AIC.table, c(n, models[[i]]$rank + 1, models[[i]]$aic + (2*K*(K+1))/(n-K-1)))
}
colnames(AIC.table)<- c("N","df","AICc")
rownames(AIC.table)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
AIC.table
###########################################################################
# AICc function
###########################################################################
AICc <- function(x){
## Calculate AICc with glm of models
n = length(x[[1]]$fitted)
AIC.table = c() # Make a place for summary table
for(i in 1:4) {
AIC.table<-
rbind(AIC.table, c(n, x[[i]]$rank + 1, x[[i]]$aic + (2*K*(K+1))/(n-K-1)))
}
colnames(AIC.table)<- c("N","df","AICc")
rownames(AIC.table)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
return(x)
}
AICc(models)
###########################################################################
# AICc function
###########################################################################
AICc <- function(x){
## Calculate AICc with glm of models
n = length(x[[1]]$fitted)
AIC.table = c() # Make a place for summary table
for(i in 1:4) {
AIC.table<-
rbind(AIC.table, c(n, x[[i]]$rank + 1, x[[i]]$aic + (2*K*(K+1))/(n-K-1)))
}
colnames(AIC.table)<- c("N","df","AICc")
rownames(AIC.table)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
return(AIC.table)
}
AICc(models)
summary(model3)
