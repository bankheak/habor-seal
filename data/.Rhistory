leveneTest(y, group)
#where y = numerical data (data7$y7)
#	group = groups assignments (data7$x7)
leveneTest(data7$y7,data7$x7)
pleveneTest(4.818,18)
mean1 <- mean(data7$y7[data7$x7 == "Snail"])
mean2 <- mean(data7$y7[data7$x7 == "No_Snail"])
pooledVar <- (sum((data7$y7[data7$x7 == "Snail"]-mean1)^2) + sum((data7$y7[data7$x7 == "No_Snail"]-mean2)^2))/(length(data7$y7[data7$x7 == "Snail"]) + length(data7$y7[data7$x7 == "No_Snail"]) - 2)
pooledSE <- sqrt(pooledVar/length(data7$y7[data7$x7 == "Snail"]) + pooledVar/length(data7$y7[data7$x7 == "No_Snail"]))
(tTwoSample <- (mean1 - mean2)/pooledSE)
DF<-length(data7$y7[data7$x7 == "Snail"]) + length(data7$y7[data7$x7 == "No_Snail"]) - 2
DF
2*pt(2.229,18)
t.test(data7$y7[data7$x7 == "Snail"],data7$y7[data7$x7 == "No_Snail"],var.equal = F)
{11*log(11/9.52)}+ {6*log(6/7.48)}+ {3*log(3/4.48)}+ {5*log(5/3.52)}
1-pchisq(1.527,1)
1-pchisq(0.717,1)
install.packages("ggplot2")
require(ggplot2)
install.packages("ggplot2movies")
require(ggplot2movies)
data("movies")
str(movies)
qplot(x=budget,y=rating,data=movies)
qplot(year,budget,data=movies)
qplot(year,budget,data=movies,ylim=c(0,100000000),main="Movies are now expensive!",xlab = "Year movie was released",ylab = "Total budget (US dollars"))
qplot(year,budget,data=movies,ylim=c(0,100000000),main="Movies are now expensive!",xlab = "Year movie was released",ylab = "Total budget (US dollars)")
install.packages("ggthemes")
require(ggthemes)
data("iris")
ggplot(iris,aes(x=Species,y=Sepal.Length))+geom_boxplot()
plot(pnorm(x=c(0:20),10,1))
x<-c(0:20)
plot(pnorm(x,10,1))
x<-c(50:250)
plot(punif(x,100,210))
data<-c(456, 360, 612, 500, 587, 493,518)
mean(data)
median(data)
har.mean <- function(x){
length(x)/sum(1/x)
}
har.mean(data)
var(data)
quantile(data)
se <- function(x) sd(x)/sqrt(length(x))
se(data)
snow.data<-data.frame(Altitude=c(1234,1457,1637,1893,2011,2108,2383),Species.rich=c(4,5,9,5,7,18,4))
cor.test(snow.data$Altitude,snow.data$Species.rich)
cov(snow.data)
sd(snow.data$Altitude)
sd(snow.data$Species.rich)
crab <- iidspace(c("No Crab", "Crab"), ntrials = 80, probs = c(0.82, 0.18))
require(prob)
crab <- iidspace(c("No Crab", "Crab"), ntrials = 80, probs = c(0.82, 0.18))
require("prob")
crab <- iidspace(c("No Crab", "Crab"), ntrials = 80, probs = c(0.82, 0.18))
crab <- iidspace(c("No Crab", "Crab"), probs = c(0.82, 0.18))
crab <- iidspace(c("No Crab", "Crab"), ntrials = 10, probs = c(0.82, 0.18))
n<-80
x<-0:80
y<-pbinom(x,size=n,prob = 0.18)
plot(x,y)
pbinom(x,20,0.18)
dbinom(20,80,0.18)
pbinom(32,80,0.18)
1-pbinom(18,80,0.18)
pnorm(4,15,10)
1-pchisq(18,4)
ppois(18,8)-ppois(4,8)
ppois(4,8)-ppois(18,8)
1-punif(18,0,34.6)
pchisq(5.6088,1)
1-pchisq(5.6088,1)
ox.data<-data.frame(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0))
View(ox.data)
summary(ox.data)
ox.data<-data.frame(Level=c("High","Med","Low"),Ox.con=c(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0)))
fit_lm<-lm(Ox.con~Level,data=ox.data)
anova(fit_lm)
oxy.data<-read.csv(Book1)
oxy.data<-read.csv("Book1")
library(readr)
Book1 <- read_csv("Homework/Book1.csv")
View(Book1)
View(ox.data)
ox.data<-data.frame(Ox.con=c(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0)))
ox.data<-data.frame(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0))
str(ox.data)
ox.data<-data.frame(Level=c("High","Med","Low"),High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0))
1-pchisq(0.5143,1)
1-ppois(6,4)
dpois(2,4)
ppois(7,4)
s1<-c(40, 82, 45, 68, 42, 36, 64, 89, 71, 68)
s2<-c(23, 41, 34, 76, 32, 56, 63, 49, 51, 44)
(twoSampleData <- data.frame(Sample1 = s1, Sample2 = s2))
mean1 <- mean(twoSampleData$Sample1)
mean2 <- mean(twoSampleData$Sample2)
pooledVar <- (sum((twoSampleData$Sample1-mean1)^2) + sum((twoSampleData$Sample2-mean2)^2))/(length(twoSampleData$Sample1) + length(twoSampleData$Sample2) - 2)
pooledSE <- sqrt(pooledVar/length(twoSampleData$Sample1) + pooledVar/length(twoSampleData$Sample2))
(tTwoSample <- (mean1 - mean2)/pooledSE)
1-pt(1.768,18)
2*pt(12.3,4)
1-pt(2.3,18)
1-pf(2,18,4)
sample<-rep(c("High","Med","Low"),each=5)
ox.data<-c(12.2,8.4,12,17.9,7.3,26.4,21.7,6.0,16.2,18.0,17.5,9.1,18.1,28.7,4.0)
(threeSampleData<-data.frame(Sample=sample,Data=ox.data))
fit_lm<-lm(ox.data~sample,data=threeSampleData)
anova(fit_lm)
plot(ox.data~sample,data=threeSampleData)
boxplot(ox.data~sample,data=threeSampleData)
boxplot(ox.data~sample,data=threeSampleData)
alc.data<-data.frame(Predictor=c(10,20,30,40,50,60),Response=c(-1.7447,-1.824,-1.7696,-1.553,-1.377,-1.194))
fit<-lm(Response~Predictor,data=alc.data)
summary(fit)
fit$coefficients
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
sd_noise<-5
nobs<-100    # number of observations
slope<-0.1
intercept<--1
sd_noise<-5
predictor<-seq(0,100,length.out=nobs)
noise<-rnorm(nobs,mean=0,sd=sd_noise)
response<-intercept+slope*predictor+noise
plot(response,predictor)
plot(predictor,response)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
dat<-data.frame(predictor=predictor,
response=response)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
fit<-glm(response~predictor, data = dat)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
plot(predictor, response)
abline(fit)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
predictor<-runif(n = nobs,0,100)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
predictor<-runif(n = nobs,0,100)
dat<-data.frame(predictor=predictor,
response=response)
pred <- predict(fit, newdata = dat)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
# Remove all variables
rm(list=ls())
## load all necessary packages
install.packages("devtools")
install_github("whoppitt/NBDA")
require(devtools)
## load all necessary packages
require(rmarkdown)  # “Knit” button (Ctrl+Shift+K) displays preview
install.packages("microbenchmark")
install.packages("parallel")
install.packages("doParallel")
install.packages("foreach")
# Upload packages
require(ggplot2)
require(microbenchmark)
require(parallel)
require(doParallel)
require(foreach)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1) # for reproducibility
geom_growth_base <- function(N0 = 2,
T = 999,
lambda = 1.01,
sigma = 0.2){
Nvals <- vector('numeric') # initiate a place to put the values
Nvals[1] <- N0
for (t in 1:T){
Nvals[t+1] <- Nvals[t]*(lambda*exp(rnorm(1,0,sigma)))
}
return(Nvals)
}
# Run the simulation
out <- geom_growth_base()
# Plot the results
plot(0:999,
out,
xlab='Time',
ylab='Population size',
type='o')
```{r}
# Default number of time-points
start_time <- Sys.time()
out <- geom_growth_base()
end_time <- Sys.time()
end_time - start_time
# Repeat with greater number of time-points
start_time <- Sys.time()
out <- geom_growth_base(T = 9E5)
out <- geom_growth_base(T = 9E5)
end_time <- Sys.time()
end_time <- Sys.time()
end_time - start_time
# Note that the time won't be exactly the same each time (unless the seed is the same)
start_time <- Sys.time()
out <- geom_growth_base(T = 9E5)
out <- geom_growth_base(T = 9E5)
end_time <- Sys.time()
end_time - start_time
system.time(geom_growth_base(T=9E5))
comp <- microbenchmark(TS_009 = {geom_growth_base(T = 9)},
TS_099 = {geom_growth_base(T = 99)},
TS_999 = {geom_growth_base(T = 999)})
comp
autoplot(comp)
set.seed(1) # for reproducibility
geom_growth_preallocated <- function(N0 = 2,
T = 999,
lambda = 1.01,
sigma = 0.2){
Nvals <- vector('numeric', length = T+1) # here's the only change
Nvals[1] <- N0
for (i in 1:T){
Nvals[i+1] <- Nvals[i]*(lambda*exp(rnorm(1,0,sigma)))
}
return(Nvals)
}
# Compare the old and new simulation functions
comp <- microbenchmark(Old = {geom_growth_base(T = 9999)},
New = {geom_growth_preallocated(T = 9999)})
comp
\subsection{Progress bar}
\subsection{Progress bar}
data <- geom_growth_preallocated(T = 99999)
start_time <- Sys.time()
growth_rates <- vector('numeric', (length(data)-1))
for(i in 1:(length(data)-1)){
growth_rates[i] <- data[i+1] / data[i]
}
end_time <- Sys.time()
end_time-start_time
start_time <- Sys.time()
growth_rates <- data[-1] / data[-length(data)]
end_time <- Sys.time()
end_time-start_time
n <- 5 # number of time-series to create
# use replicate() to create n time-series, each in a different matrix column
dat_array <- replicate(n, geom_growth_preallocated(T = 9999))
colnames(dat_array) <- paste0('Site_', 1:n)
head(dat_array)
calc_growth_rates <- function(x){
gr <- x[-1] / x[-length(x)]
return(gr)
}
system.time({
apply(dat_array, 2, calc_growth_rates)
})
dat_list <- as.list(as.data.frame(dat_array))
system.time({
growth_rates <- lapply(dat_list, calc_growth_rates)
})
lapply(growth_rates, head) # look only at head of each list element
growth_rate_means <- lapply( lapply(dat_list, calc_growth_rates), mean)
growth_rate_means
unlist(growth_rate_means)
growth_rate_means <- lapply( lapply(dat_list, calc_growth_rates), mean)
growth_rate_means
unlist(growth_rate_means)
sapply( lapply(dat_list, calc_growth_rates), mean)
The function \texttt{mapply} is useful when you want to parameterize a function from multiple vectors.
# Generate a large amount of demonstration data
n <- 1E8
data_list <- list("A" = rnorm(n),
"B" = rnorm(n),
"C" = rnorm(n),
"D" = rnorm(n))
data_list <- list("A" = rnorm(n),
"B" = rnorm(n),
"C" = rnorm(n),
"D" = rnorm(n))
detectCores()
cores <- 2
cl <- makeCluster(cores) # Create cluster
registerDoParallel(cl) # Activate clusters
system.time({
means <- foreach(i = 1:length(data_list),
.combine = c) %dopar% {
# replace c with rbind to create a dataframe
mean(data_list[[i]])
}
})
detectcores()
detect.cores()
summaryRprof()
detectCores()
unlink("C:/Users/bankh/My_Repos/habor-seal/results/GLM_Analysis_cache", recursive = TRUE)
knit_with_parameters("C:/Users/bankh/My_Repos/habor-seal/results/GLM_Analysis.Rmd")
install.packages("AICcmodavg")
require(AICcmodavg)
# Set working directory here
setwd("C:/Users/bankh/My_Repos/habor-seal/data")
# Retrieve data
m.data<-read.csv("m.data.csv")
w.data<-read.csv("w.data.csv")
# Combine location avg noise and total seals within dates
new.w.data<-read.csv("new.w.data.csv")
# Fix date
new.w.data$date<-as.Date(as.character(new.w.data$date),format = "%m/%d/%Y")
m.data$date<-as.Date(as.character(m.data$date),format = "%m/%d/%Y")
# Merge data
full.data<-merge(new.w.data,m.data,all = T)
full.data$time<-as.numeric(full.data$time)
full.data$month<-as.numeric(full.data$month)
# Check GLM
model1<- glm.nb(seals ~ 1, data = full.data)
model2<- glm.nb(seals ~ site*noise + month + tide + time, data = full.data)
# Check GLM
model1<- glm.nb(seals ~ 1, data = full.data)
require(MASS) #for glm.nb()
# Check GLM
model1<- glm.nb(seals ~ 1, data = full.data)
model2<- glm.nb(seals ~ site*noise + month + tide + time, data = full.data)
model3<- glm.nb(seals ~ site*noise + month + time, data = full.data)
model4<- glm.nb(seals ~ site*noise + month, data = full.data)
AICc(c(model1, model2, model3, model4))
?AICc
AICc(model1)
AICc(model1, return.K = FALSE, second.ord = TRUE,
nobs = NULL, c.hat = 1)
aictab(model1)
aictab(c(model1, model2, model3, model4))
# Create list
models<-list(model1, model2, model3, model4)
aictab(models)
## Calculate AICc with glm of models
aictable<- aictab(models) # Looks like site*noise + month + time are the best predictors
colnames(aictable)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
aictable
## Calculate AICc with glm of models
aictable<- aictab(models, modnames = NULL,
second.ord = TRUE,
nobs = NULL, sort = TRUE) # Looks like site*noise + month + time are the best predictors
aictab(models, modnames = NULL,
second.ord = TRUE,
nobs = NULL, sort = TRUE)
colnames(aictable)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
aictable
aictable<- aictab(models, modnames = NULL,
second.ord = TRUE,
nobs = NULL, sort = TRUE)
aictable
names(aictable)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
aictable
## Calculate AICc with glm of models
aictable<- aictab(models, modnames = NULL,
second.ord = TRUE,
nobs = NULL, sort = TRUE, c.hat = 1) # Looks like site*noise + month + time are the best predictors
names(aictable)<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
aictable
aictable
## Calculate AICc with glm of models
aictable<- aictab(models, modnames = NULL,
second.ord = TRUE,
nobs = NULL, sort = TRUE, c.hat = 1) # Looks like site*noise + month + time are the best predictors
aictable
Modnames<- c("seals ~ 1",
"seals ~ site*noise + month + tide + time",
"seals ~ site*noise + month + time",
"seals ~ site*noise + month")
## Calculate AICc with glm of models
aictable<- aictab(models, modnames = NULL, modnames = Modnames
second.ord = TRUE,
aictable
## Calculate AICc with glm of models
aictable<- aictab(models, modnames = Modnames
second.ord = TRUE,
aictable
## Calculate AICc with glm of models
aictable<- aictab(models, modnames = Modnames,
second.ord = TRUE,
nobs = NULL, sort = TRUE, c.hat = 1) # Looks like site*noise + month + time are the best predictors
aictable
# Set working directory here
setwd("C:/Users/bankh/My_Repos/habor-seal/data")
# Retrieve data
m.data<-read.csv("m.data.csv")
new.w.data<-read.csv("new.w.data.csv")
IQR(new.w.data$seals[month == 7])
new.w.data$seals[month == 7]
# Set working directory here
setwd("C:/Users/bankh/My_Repos/habor-seal/data")
# Retrieve data
m.data<-read.csv("m.data.csv")
new.w.data<-read.csv("new.w.data.csv")
View(new.w.data)
new.w.data$seals[month == 7]
IQR(new.w.data$seals[new.w.data$month == 7])
summary(new.w.data$seals[new.w.data$month == 7])
IQR(new.w.data$seals[new.w.data$month == 7])
## Waterfront
length(new.w.data$seals[new.w.data$month == 7])
## Marina
length(m.data$seals[m.data$month == 8])
IQR(m.data$seals[m.data$month == 8])
summary(m.data$seals[m.data$month == 8])
ggplot(new.w.data, aes(time, seals))+geom_point()+geom_smooth(method = "gam", formula =seals~s(time))+
stat_smooth(method="gam",colour="black")+xlab("Time of Day")+ylab("Number of Seals Hauled-out")+
coord_trans(x = "log10")+theme(panel.background = element_blank())
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggplot2)
ggplot(new.w.data, aes(time, seals))+geom_point()+geom_smooth(method = "gam", formula =seals~s(time))+
stat_smooth(method="gam",colour="black")+xlab("Time of Day")+ylab("Number of Seals Hauled-out")+
coord_trans(x = "log10")+theme(panel.background = element_blank())
full.data<-read.csv("../data/full.data.csv")
require(ggplot2)
# Plot
m1<- glm.nb(seals ~ time, data = full.data)
data <- data.frame(
time = rep(seq(from = min(full.data$time), to = max(full.data$time), length.out = 18), 2),
site = factor(rep(1:2, each = 18), levels = 1:2, labels =
unique(full.data$site)))
data <- cbind(data, predict(m1, data, type = "link", se.fit=TRUE))
data <- within(data, {
seals <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
ggplot(data, aes(time, seals)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = site), alpha = .25) +
geom_line(aes(colour = site), linewidth = 2) +
labs(x = "Time of Day", y = "Predicted Number of Seals Hauled-out")
###########################################################################
# PART 2: Check Time of Day Significance on Seals ---------------------------------------------
# Plot
m1<- glm.nb(seals ~ time, data = full.data)
data <- data.frame(
time = rep(seq(from = min(full.data$time), to = max(full.data$time), length.out = 18), 2),
site = factor(rep(1:2, each = 18), levels = 1:2, labels =
unique(full.data$site)))
data <- cbind(data, predict(m1, data, type = "link", se.fit=TRUE))
data <- within(data, {
seals <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
ggplot(data, aes(time, seals)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = site), alpha = .25) +
geom_line(aes(colour = site), linewidth = 2) +
labs(x = "Time of Day", y = "Predicted Number of Seals Hauled-out")
summary(m1)
###########################################################################
# PART 2: Check Time of Day Significance on Seals ---------------------------------------------
# Plot
model3<- glm.nb(seals ~ site*noise + month + time, data = full.data)
data <- data.frame(
time = rep(seq(from = min(full.data$time), to = max(full.data$time), length.out = 18), 2),
site = factor(rep(1:2, each = 18), levels = 1:2, labels =
unique(full.data$site)))
data <- cbind(data, predict(model3, data, type = "link", se.fit=TRUE))
unique(full.data$site)
ggplot(data, aes(time, seals)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = site), alpha = .25) +
geom_line(aes(colour = site), linewidth = 2) +
labs(x = "Time of Day", y = "Predicted Number of Seals Hauled-out")
###########################################################################
# PART 2: Check Time of Day Significance on Seals ---------------------------------------------
# Plot
m1<- glm.nb(seals ~ time, data = full.data)
data <- data.frame(
time = rep(seq(from = min(full.data$time), to = max(full.data$time), length.out = 18), 2),
site = factor(rep(1:2, each = 18), levels = 1:2, labels =
unique(full.data$site)))
data <- cbind(data, predict(m1, data, type = "link", se.fit=TRUE))
data <- within(data, {
seals <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
ggplot(data, aes(time, seals)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = site), alpha = .25) +
geom_line(aes(colour = site), linewidth = 2) +
labs(x = "Time of Day", y = "Predicted Number of Seals Hauled-out")
full.data<-read.csv("../data/full.data.csv")
require(ggplot2)
# Plot
p<-ggplot(new.w.data, aes(x = time, y = seals, group = time))
p+geom_boxplot(fill="black", alpha=0.2)+
xlab("Time of Day")+ylab("Number of Seals")+theme(panel.background = element_blank())
p<-ggplot(new.w.data, aes(x = time, y = seals, group = time))
p+geom_boxplot(fill="black", alpha=0.2)+
xlab("Time of Day")+ylab("Number of Seals")+theme(panel.background = element_blank())
# Marina
j<-ggplot(m.data, aes(x = time, y = seals, group = time))
j+geom_boxplot(fill="black", alpha=0.2)+
xlab("Time of Day")+ylab("Number of Seals")+theme(panel.background = element_blank())
## IQR
length(m.data$seals[m.data$time == 16])
## IQR
length(m.data$seals[m.data$time == 15])
summary(m.data$seals[m.data$time == 16])
summary(m.data$seals[m.data$time == 15])
