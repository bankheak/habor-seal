mean1 <- mean(twoSampleData$Sample1)
mean2 <- mean(twoSampleData$Sample2)
pooledVar <- (sum((twoSampleData$Sample1-mean1)^2) + sum((twoSampleData$Sample2-mean2)^2))/(length(twoSampleData$Sample1) + length(twoSampleData$Sample2) - 2)
pooledSE <- sqrt(pooledVar/length(twoSampleData$Sample1) + pooledVar/length(twoSampleData$Sample2))
(tTwoSample <- (mean1 - mean2)/pooledSE)
2*pt(-tTwoSample, length(twoSampleData$Sample1) + length(twoSampleData$Sample2) - 2)
se1 <- sd(twoSampleData$Sample1)/sqrt(length(twoSampleData$Sample1))
se2 <- sd(twoSampleData$Sample2)/sqrt(length(twoSampleData$Sample2))
barVals2 <- barplot(c(mean1, mean2),
ylim = c(0, 50),
ylab = "Label (units)",
names.arg = c("Sample 1", "Sample 2"))
arrows(barVals2, c(mean1+se1, mean2+se2), barVals2, c(mean1-se1, mean2-se2), angle = 90, code = 3)
dif <- twoSampleData$Sample1 - twoSampleData$Sample2
meanDif <- mean(dif)
seDif <- sd(dif)/sqrt(length(dif))
(tDif <- (meanDif - 0)/seDif)
chisq(11,4)
1-pchisq(11,4)
2*pt(1,20)
1-pt(11,1)
int2 <- 11
set.seed(int2)  #Sets the seed for the random numbers
data2 <- data.frame(
x2=gl(2, 12, labels = c("Exposed", "Protected")),
y2=round(c(rnorm(12, 20, 4), rnorm(12, 28, 4))))
data2           #These are your data
int2 <- 11
set.seed(int2)  #Sets the seed for the random numbers
data2 <- data.frame(
x2=gl(2, 12, labels = c("Exposed", "Protected")),
y2=round(c(rnorm(12, 20, 4), rnorm(12, 28, 4))))
data2           #These are your data
(twoSampleData2 <- data.frame(Sample = x2, Data = y2))
(twoSampleData2 <- data.frame(x2 = sample, y2 = data))
mean1 <- mean(data2$y2[data2$x2 == "Exposed"])
mean1
mean2 <- mean(data2$y2[data2$x2 == "Protected"])
mean2
pooledVar <- (sum((data2$y2[data2$x2 == "Exposed"]-mean1)^2) + sum((data2$y2[data2$x2 == "Protected"]-mean2)^2))/(length(data2$y2[data2$x2 == "Exposed"]) + length(data2$y2[data2$x2 == "Protected"]) - 2)
pooledVar
pooledSE <- sqrt(pooledVar/length(data2$y2[data2$x2 == "Exposed"]) + pooledVar/length(data2$y2[data2$x2 == "Protected"]))
pooledSE
(tTwoSample <- (mean1 - mean2)/pooledSE)
DF<-length(data2$y2[data2$x2 == "Exposed") + length(data2$y2[data2$x2 == "Protected") - 2
DF<-length(data2$y2[data2$x2 == "Exposed"]) + length(data2$y2[data2$x2 == "Protected") - 2
DF<-length(data2$x2 == "Exposed"]) + length(data2$y2[data2$x2 == "Protected") - 2
DF<-length(data2$y2[data2$x2 == "Exposed"]) + length(data2$y2[data2$x2 == "Protected"]) - 2
DF
t.test(data2$y2[data2$x2 == "Exposed"],data2$y2[data2$x2 == "Protected"],var.equal = T)
t.test(data2$y2[data2$x2 == "Exposed"],data2$y2[data2$x2 == "Protected"],var.equal = T,alternative = "less")
int3 <- 1
set.seed(int3)  #Sets the seed for the random numbers
data3 <- data.frame(samples=paste0("barnacle",1:8),
HighFlow= round(rnorm(8, int3+8, 4)),
LowFlow=round(rnorm(8, 13, 4)))
data3  #These are your data
dif <- data3$HighFlow - data3$LowFlow
dif
meanDif<-mean(dif)
meanDif
seDif <- sd(dif)/sqrt(length(dif))
seDif
sd(dif)
(tDif <- (meanDif - 0)/seDif)
df<-length(dif)-1
df
2*pt(tDif,df)
{[145-130.310]^2/130.310}+{[11-9.420]^2/9.420}+{[1- 17.270]^2/17.270}
pchisq(16.933,1)
1-pchisq(16.933,1)
1-pchisq(59.339,1)
int7 <- 1
set.seed(int7)  #Sets the seed for the random numbers
data7 <- data.frame(
x7=gl(2, 10, labels=c("Snail","No_Snail")),
y7=round(c(rnorm(10,42,18),rnorm(10,32,6)), 1))
data7           #These are your data
#install car package
install.packages("car")
require(car)
help("leveneTest")
data7
#How to use Levene’s test
leveneTest(y, group)
#where y = numerical data (data7$y7)
#	group = groups assignments (data7$x7)
leveneTest(data7$y7,data7$x7)
pleveneTest(4.818,18)
mean1 <- mean(data7$y7[data7$x7 == "Snail"])
mean2 <- mean(data7$y7[data7$x7 == "No_Snail"])
pooledVar <- (sum((data7$y7[data7$x7 == "Snail"]-mean1)^2) + sum((data7$y7[data7$x7 == "No_Snail"]-mean2)^2))/(length(data7$y7[data7$x7 == "Snail"]) + length(data7$y7[data7$x7 == "No_Snail"]) - 2)
pooledSE <- sqrt(pooledVar/length(data7$y7[data7$x7 == "Snail"]) + pooledVar/length(data7$y7[data7$x7 == "No_Snail"]))
(tTwoSample <- (mean1 - mean2)/pooledSE)
DF<-length(data7$y7[data7$x7 == "Snail"]) + length(data7$y7[data7$x7 == "No_Snail"]) - 2
DF
2*pt(2.229,18)
t.test(data7$y7[data7$x7 == "Snail"],data7$y7[data7$x7 == "No_Snail"],var.equal = F)
{11*log(11/9.52)}+ {6*log(6/7.48)}+ {3*log(3/4.48)}+ {5*log(5/3.52)}
1-pchisq(1.527,1)
1-pchisq(0.717,1)
install.packages("ggplot2")
require(ggplot2)
install.packages("ggplot2movies")
require(ggplot2movies)
data("movies")
str(movies)
qplot(x=budget,y=rating,data=movies)
qplot(year,budget,data=movies)
qplot(year,budget,data=movies,ylim=c(0,100000000),main="Movies are now expensive!",xlab = "Year movie was released",ylab = "Total budget (US dollars"))
qplot(year,budget,data=movies,ylim=c(0,100000000),main="Movies are now expensive!",xlab = "Year movie was released",ylab = "Total budget (US dollars)")
install.packages("ggthemes")
require(ggthemes)
data("iris")
ggplot(iris,aes(x=Species,y=Sepal.Length))+geom_boxplot()
plot(pnorm(x=c(0:20),10,1))
x<-c(0:20)
plot(pnorm(x,10,1))
x<-c(50:250)
plot(punif(x,100,210))
data<-c(456, 360, 612, 500, 587, 493,518)
mean(data)
median(data)
har.mean <- function(x){
length(x)/sum(1/x)
}
har.mean(data)
var(data)
quantile(data)
se <- function(x) sd(x)/sqrt(length(x))
se(data)
snow.data<-data.frame(Altitude=c(1234,1457,1637,1893,2011,2108,2383),Species.rich=c(4,5,9,5,7,18,4))
cor.test(snow.data$Altitude,snow.data$Species.rich)
cov(snow.data)
sd(snow.data$Altitude)
sd(snow.data$Species.rich)
crab <- iidspace(c("No Crab", "Crab"), ntrials = 80, probs = c(0.82, 0.18))
require(prob)
crab <- iidspace(c("No Crab", "Crab"), ntrials = 80, probs = c(0.82, 0.18))
require("prob")
crab <- iidspace(c("No Crab", "Crab"), ntrials = 80, probs = c(0.82, 0.18))
crab <- iidspace(c("No Crab", "Crab"), probs = c(0.82, 0.18))
crab <- iidspace(c("No Crab", "Crab"), ntrials = 10, probs = c(0.82, 0.18))
n<-80
x<-0:80
y<-pbinom(x,size=n,prob = 0.18)
plot(x,y)
pbinom(x,20,0.18)
dbinom(20,80,0.18)
pbinom(32,80,0.18)
1-pbinom(18,80,0.18)
pnorm(4,15,10)
1-pchisq(18,4)
ppois(18,8)-ppois(4,8)
ppois(4,8)-ppois(18,8)
1-punif(18,0,34.6)
pchisq(5.6088,1)
1-pchisq(5.6088,1)
ox.data<-data.frame(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0))
View(ox.data)
summary(ox.data)
ox.data<-data.frame(Level=c("High","Med","Low"),Ox.con=c(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0)))
fit_lm<-lm(Ox.con~Level,data=ox.data)
anova(fit_lm)
oxy.data<-read.csv(Book1)
oxy.data<-read.csv("Book1")
library(readr)
Book1 <- read_csv("Homework/Book1.csv")
View(Book1)
View(ox.data)
ox.data<-data.frame(Ox.con=c(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0)))
ox.data<-data.frame(High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0))
str(ox.data)
ox.data<-data.frame(Level=c("High","Med","Low"),High=c(12.2,8.4,12,17.9,7.3),Med=c(26.4,21.7,6.0,16.2,18.0),Low=c(17.5,9.1,18.1,28.7,4.0))
1-pchisq(0.5143,1)
1-ppois(6,4)
dpois(2,4)
ppois(7,4)
s1<-c(40, 82, 45, 68, 42, 36, 64, 89, 71, 68)
s2<-c(23, 41, 34, 76, 32, 56, 63, 49, 51, 44)
(twoSampleData <- data.frame(Sample1 = s1, Sample2 = s2))
mean1 <- mean(twoSampleData$Sample1)
mean2 <- mean(twoSampleData$Sample2)
pooledVar <- (sum((twoSampleData$Sample1-mean1)^2) + sum((twoSampleData$Sample2-mean2)^2))/(length(twoSampleData$Sample1) + length(twoSampleData$Sample2) - 2)
pooledSE <- sqrt(pooledVar/length(twoSampleData$Sample1) + pooledVar/length(twoSampleData$Sample2))
(tTwoSample <- (mean1 - mean2)/pooledSE)
1-pt(1.768,18)
2*pt(12.3,4)
1-pt(2.3,18)
1-pf(2,18,4)
sample<-rep(c("High","Med","Low"),each=5)
ox.data<-c(12.2,8.4,12,17.9,7.3,26.4,21.7,6.0,16.2,18.0,17.5,9.1,18.1,28.7,4.0)
(threeSampleData<-data.frame(Sample=sample,Data=ox.data))
fit_lm<-lm(ox.data~sample,data=threeSampleData)
anova(fit_lm)
plot(ox.data~sample,data=threeSampleData)
boxplot(ox.data~sample,data=threeSampleData)
boxplot(ox.data~sample,data=threeSampleData)
alc.data<-data.frame(Predictor=c(10,20,30,40,50,60),Response=c(-1.7447,-1.824,-1.7696,-1.553,-1.377,-1.194))
fit<-lm(Response~Predictor,data=alc.data)
summary(fit)
fit$coefficients
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
sd_noise<-5
nobs<-100    # number of observations
slope<-0.1
intercept<--1
sd_noise<-5
predictor<-seq(0,100,length.out=nobs)
noise<-rnorm(nobs,mean=0,sd=sd_noise)
response<-intercept+slope*predictor+noise
plot(response,predictor)
plot(predictor,response)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
dat<-data.frame(predictor=predictor,
response=response)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
fit<-glm(response~predictor, data = dat)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
plot(predictor, response)
abline(fit)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
predictor<-runif(n = nobs,0,100)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
predictor<-runif(n = nobs,0,100)
dat<-data.frame(predictor=predictor,
response=response)
pred <- predict(fit, newdata = dat)
source("~/OSU_Thesis/Sample Data/Coding_Organization.R")
# Remove all variables
rm(list=ls())
## load all necessary packages
install.packages("devtools")
install_github("whoppitt/NBDA")
require(devtools)
## load all necessary packages
require(rmarkdown)  # “Knit” button (Ctrl+Shift+K) displays preview
install.packages("microbenchmark")
install.packages("parallel")
install.packages("doParallel")
install.packages("foreach")
# Upload packages
require(ggplot2)
require(microbenchmark)
require(parallel)
require(doParallel)
require(foreach)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1) # for reproducibility
geom_growth_base <- function(N0 = 2,
T = 999,
lambda = 1.01,
sigma = 0.2){
Nvals <- vector('numeric') # initiate a place to put the values
Nvals[1] <- N0
for (t in 1:T){
Nvals[t+1] <- Nvals[t]*(lambda*exp(rnorm(1,0,sigma)))
}
return(Nvals)
}
# Run the simulation
out <- geom_growth_base()
# Plot the results
plot(0:999,
out,
xlab='Time',
ylab='Population size',
type='o')
```{r}
# Default number of time-points
start_time <- Sys.time()
out <- geom_growth_base()
end_time <- Sys.time()
end_time - start_time
# Repeat with greater number of time-points
start_time <- Sys.time()
out <- geom_growth_base(T = 9E5)
out <- geom_growth_base(T = 9E5)
end_time <- Sys.time()
end_time <- Sys.time()
end_time - start_time
# Note that the time won't be exactly the same each time (unless the seed is the same)
start_time <- Sys.time()
out <- geom_growth_base(T = 9E5)
out <- geom_growth_base(T = 9E5)
end_time <- Sys.time()
end_time - start_time
system.time(geom_growth_base(T=9E5))
comp <- microbenchmark(TS_009 = {geom_growth_base(T = 9)},
TS_099 = {geom_growth_base(T = 99)},
TS_999 = {geom_growth_base(T = 999)})
comp
autoplot(comp)
set.seed(1) # for reproducibility
geom_growth_preallocated <- function(N0 = 2,
T = 999,
lambda = 1.01,
sigma = 0.2){
Nvals <- vector('numeric', length = T+1) # here's the only change
Nvals[1] <- N0
for (i in 1:T){
Nvals[i+1] <- Nvals[i]*(lambda*exp(rnorm(1,0,sigma)))
}
return(Nvals)
}
# Compare the old and new simulation functions
comp <- microbenchmark(Old = {geom_growth_base(T = 9999)},
New = {geom_growth_preallocated(T = 9999)})
comp
\subsection{Progress bar}
\subsection{Progress bar}
data <- geom_growth_preallocated(T = 99999)
start_time <- Sys.time()
growth_rates <- vector('numeric', (length(data)-1))
for(i in 1:(length(data)-1)){
growth_rates[i] <- data[i+1] / data[i]
}
end_time <- Sys.time()
end_time-start_time
start_time <- Sys.time()
growth_rates <- data[-1] / data[-length(data)]
end_time <- Sys.time()
end_time-start_time
n <- 5 # number of time-series to create
# use replicate() to create n time-series, each in a different matrix column
dat_array <- replicate(n, geom_growth_preallocated(T = 9999))
colnames(dat_array) <- paste0('Site_', 1:n)
head(dat_array)
calc_growth_rates <- function(x){
gr <- x[-1] / x[-length(x)]
return(gr)
}
system.time({
apply(dat_array, 2, calc_growth_rates)
})
dat_list <- as.list(as.data.frame(dat_array))
system.time({
growth_rates <- lapply(dat_list, calc_growth_rates)
})
lapply(growth_rates, head) # look only at head of each list element
growth_rate_means <- lapply( lapply(dat_list, calc_growth_rates), mean)
growth_rate_means
unlist(growth_rate_means)
growth_rate_means <- lapply( lapply(dat_list, calc_growth_rates), mean)
growth_rate_means
unlist(growth_rate_means)
sapply( lapply(dat_list, calc_growth_rates), mean)
The function \texttt{mapply} is useful when you want to parameterize a function from multiple vectors.
# Generate a large amount of demonstration data
n <- 1E8
data_list <- list("A" = rnorm(n),
"B" = rnorm(n),
"C" = rnorm(n),
"D" = rnorm(n))
data_list <- list("A" = rnorm(n),
"B" = rnorm(n),
"C" = rnorm(n),
"D" = rnorm(n))
detectCores()
cores <- 2
cl <- makeCluster(cores) # Create cluster
registerDoParallel(cl) # Activate clusters
system.time({
means <- foreach(i = 1:length(data_list),
.combine = c) %dopar% {
# replace c with rbind to create a dataframe
mean(data_list[[i]])
}
})
detectcores()
detect.cores()
summaryRprof()
detectCores()
knitr::opts_chunk$set(include = FALSE)
# Set working directory here
setwd("C:/Users/bankh/My_Repos/habor-seal/data")
# Retrieve data
m.data<-read.csv("m.data.csv")
w.data<-read.csv("w.data.csv")
# Load packages
require(lme4)
require(ggplot2)
require(performance) #for check_collinearity()
require(MuMIn) # For dredge function
require(MASS) #for glm.nb()
knitr::opts_chunk$set(echo = TRUE)
# Check t-test assumptions
## Is noise normal?
hist(w.data$noise[w.data$location == 1])
hist(w.data$noise[w.data$location == 2])
### Both are normal
## Equal variance?
var(w.data$noise[w.data$location == 1])
var(w.data$noise[w.data$location == 2])
### Equal variance
# Run t-test
t.test(w.data$noise[w.data$location == 1], w.data$noise[w.data$location == 2])
## Not significantly different
## Move on-to merging data sets
# Combine location avg noise and total seals within dates
new.w.data<-read.csv("new.w.data.csv")
# Combine location avg noise and total seals within dates
# Set working directory here
setwd("C:/Users/bankh/My_Repos/habor-seal/data")
new.w.data<-read.csv("new.w.data.csv")
# Fix date
new.w.data$date<-as.Date(as.character(new.w.data$date),format = "%m/%d/%Y")
m.data$date<-as.Date(as.character(m.data$date),format = "%m/%d/%Y")
# Merge data
full.data<-merge(new.w.data,m.data,all = T)
summary(full.data)
full.data$time<-as.numeric(full.data$time)
full.data$month<-as.numeric(full.data$month)
# Run pairwise cor between all independent variables
## Cut-off is +/- 0.7
cor.matrix<-cor(full.data[,c(2:4,6:7)])
# Keep only large correlations in the same model
cor.matrix[abs(cor.matrix)< 0.7]<-NA
cor.matrix
## No colilinearity
# Check distribution
ggplot(full.data, aes(x=seals)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density()+stat_density(alpha=.2,adjust = 1, fill="#FF6666")+xlab("Number of Seals Hauled-out")+ylab("Density")+theme(panel.background = element_blank())
## Negative binomial would be the best fit
# Create presence column
full.data$Presence<- ifelse(full.data$seals == 0, 0, 1)
# Change na.action
options(na.action = "na.fail")
# Fit model with all uncorrelated parameters
summary(all.parms<-glm(Presence~scale(j.date) + tide + time + site + noise + month, data = full.data, family = binomial))
# The dredge function fits all combinations
# of the variables in the all.parms model fit above
results<-dredge(all.parms)
# Grab best model based on lowest AICc
subset(results, delta == 0)
## Looks like month, noise, and site
# Create presence column
full.data$Presence<- ifelse(full.data$seals == 0, 0, 1)
# Change na.action
options(na.action = "na.fail")
# Fit model with all uncorrelated parameters
summary(all.parms<-glm(Presence~scale(j.date) + tide + time + site + noise + month, data = full.data, family = binomial))
View(full.data)
# The dredge function fits all combinations
# of the variables in the all.parms model fit above
results<-dredge(all.parms)
# Grab best model based on lowest AICc
subset(results, delta == 0)
# Set working directory here
setwd("C:/Users/bankh/My_Repos/habor-seal/data")
# Retrieve data
m.data<-read.csv("m.data.csv")
w.data<-read.csv("w.data.csv")
require(MASS) #for glm.nb()
require(MuMIn) # For dredge function
require(ggplot2)
# Combine location avg noise and total seals within dates
new.w.data<-read.csv("new.w.data.csv")
# Fix date
new.w.data$date<-as.Date(as.character(new.w.data$date),format = "%m/%d/%Y")
m.data$date<-as.Date(as.character(m.data$date),format = "%m/%d/%Y")
# Merge data
full.data<-merge(new.w.data,m.data,all = T)
# Run pairwise cor between all independent variables
## Cut-off is +/- 0.7
cor.matrix<-cor(full.data[,c(2:4,6:7)])
# Keep only large correlations in the same model
cor.matrix[abs(cor.matrix)< 0.7]<-NA
cor.matrix
# Create presence column
full.data$Presence<- ifelse(full.data$seals == 0, 0, 1)
# Change na.action
options(na.action = "na.fail")
# Fit model with all uncorrelated parameters
summary(all.parms<-glm(Presence~scale(j.date) + tide + time + site + noise + month, data = full.data, family = binomial))
# The dredge function fits all combinations
# of the variables in the all.parms model fit above
results<-dredge(all.parms)
# Grab best model based on lowest AICc
subset(results, delta == 0)
# Fit model with all uncorrelated parameters
summary(all.parms<-glm(seals~scale(j.date) + tide + time + site + noise + month, data = full.data, family = binomial))
# Check GLM
model<- glm.nb(seals ~ site*noise + month, data = full.data)
summary(model) #everything is significant
## Waterfront
ggplot(new.w.data, aes(noise,seals))+geom_point()+geom_smooth(method = "gam", formula =seals~s(noise))+
stat_smooth(method="gam",colour="black")+xlab("Average Noise Level (dB)")+ylab("Number of Seals Hauled-out")+
coord_trans(x = "log10")+theme(panel.background = element_blank())
## Marina
ggplot(m.data, aes(noise,seals))+geom_point()+geom_smooth(method = "gam", formula =seals~s(noise))+
stat_smooth(method="gam",colour="black")+xlab("Average Noise Level (dB)")+ylab("Number of Seals Hauled-out")+
coord_trans(x = "log10")+theme(panel.background = element_blank())
## Waterfront
p<-ggplot(new.w.data, aes(x=month,y =seals,group=month))
p+geom_boxplot(fill="black", alpha=0.2)+
scale_x_discrete(limits=c("1","2","3","4","5","6"))+
xlab("Month")+ylab("Number of Seals")+theme(panel.background = element_blank())
## Waterfront
p<-ggplot(new.w.data, aes(x=month,y =seals,group=month))
p+geom_boxplot(fill="black", alpha=0.2)+
xlab("Month")+ylab("Number of Seals")+theme(panel.background = element_blank())
## Marina
p<-ggplot(m.data, aes(x=month,y =seals,group=month))
p+geom_boxplot(fill="black", alpha=0.2)+
scale_x_discrete(limits=c("Jun","Jul","Aug","Sept","Oct","Nov"))+
xlab("Month")+ylab("Number of Seals")+theme(panel.background = element_blank())
