##### simulate sizes after a month
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
trees2
siz.grps<-ifelse(trees2 < 70,1,ifelse(trees2 < 80,2,
ifelse(trees2 < 90,3,
ifelse(trees2 < 100,4,ifelse(trees2 < 110,5,6)))))
# How many trees in each size group
grp.tots<-as.data.frame(table(siz.grps))
# Proportion of trees in each size group
grp.props<-as.data.frame(prop.table(table(siz.grps)))
## lets rename the freq column and combine with small to create a TRANSITION MATRIX
colnames(grp.props)[2] = "Med"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
#############################################################
##' growth is continuous non-negative so need
##' gamma MOM to estimate gamma parms
########################################
gamma.MOM<- function(meanz,sdz){
alpha<-(meanz/sdz)^2
beta<- (sdz^2)/meanz
return(c(alpha,beta)) }
##############################################
#### specify daily growth rate of critters
##############################################
daily.rate <- 0.5
## convert to monthly
rats<-daily.rate*30
###################################################################
## estimate gamma parameters for simulation,
## assum a CV of 0.3 0r 30% for growth rates (based on literature)
###################################################################
grow<-gamma.MOM(rats,rats*0.3)
######################################################################
# assume 10000 animals are currently 35 mm long. lets simulate growth
critter<-rep(35,10000)
#####################################################################
##### simulate sizes after a month
critter2<-critter + rgamma(10000,grow[1],scale=grow[2])
######################################################################
### here's what we have
hist(critter2)
siz.grps<-ifelse(critter2 < 40,1,ifelse(critter2 < 50,2,ifelse(critter2 < 70,3,4)))
## what do we have?
grp.tots<-as.data.frame(table(siz.grps))
grp.tots
## lets see what proportion of total fish made it into each size group
grp.props<-as.data.frame(prop.table(table(siz.grps)))
grp.props  #looks like zero went into group 4, Lets add that. Note that R thinks the groups are factors
#####################################################################################
## wow no need to simulate, just use the STATE TRANSITION VECTOR (the proportions)
## wonder if I can do the same thing for medium fish
## first lets rename the proportion matrix so we don't over write
grow.trans<-grp.props
colnames(grow.trans)[2]<-"Small"  ## rename column
grow.trans
# now lets see how big medium size fish get after a month, for ease
# lets use the midpoint size for the group
# assume 10000 animals are currently 45 mm long. lets simulate growth
critter<-rep(45,10000)
##### simulate sizes after a month
critter2<-critter + rgamma(10000,grow[1],scale=grow[2])
## Now discretize the lengths into groups
## Small: < 40 mm, Medium: 40-50 mm, Large: 50 - 70 mm, Very large: > 70 mm.
siz.grps<-ifelse(critter2 < 40,1,ifelse(critter2 < 50,2,ifelse(critter2 < 70,3,4)))
## what do we have?
grp.tots<-as.data.frame(table(siz.grps))
grp.tots
## lets see what proportion of total fish made it into each size group
grp.props<-as.data.frame(prop.table(table(siz.grps)))
grp.props
## lets rename the freq column and combine with small to create a TRANSITION MATRIX
colnames(grp.props)[2] = "Med"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
######################################################################
### here's what we have
hist(critter2)
# Part B.  ----------------------------------------------------------------
#' Create a stage transition matrix for modeling the growth of a
#' tree species (height) and run for 10 time steps. Height should have at least 6 stages
gamma.MOM<- function(meanz,sdz){
alpha<-(meanz/sdz)^2
beta<- (sdz^2)/meanz
return(c(alpha,beta)) }
yearly.rate <- 0.6
growth<-gamma.MOM(yearly.rate,yearly.rate*0.1)
################################################################################
# Extra Small Trees
# Assume 10000 trees are currently 15 m tall.
trees<-rep(15,10000)
# Simulate sizes after a year
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
hist(trees2)
growth<-gamma.MOM(yearly.rate,yearly.rate*0.5)
################################################################################
# Extra Small Trees
# Assume 10000 trees are currently 15 m tall.
trees<-rep(15,10000)
# Simulate sizes after a year
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
hist(trees2)
growth<-gamma.MOM(yearly.rate,yearly.rate*0.8)
################################################################################
# Extra Small Trees
# Assume 10000 trees are currently 15 m tall.
trees<-rep(15,10000)
# Simulate sizes after a year
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
hist(trees2)
growth<-gamma.MOM(yearly.rate,yearly.rate*0.4)
################################################################################
# Extra Small Trees
# Assume 10000 trees are currently 15 m tall.
trees<-rep(15,10000)
# Simulate sizes after a year
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
hist(trees2)
yearly.rate <- 2
growth<-gamma.MOM(yearly.rate,yearly.rate*0.4)
################################################################################
# Extra Small Trees
# Assume 10000 trees are currently 15 m tall.
trees<-rep(15,10000)
# Simulate sizes after a year
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
hist(trees2)
################################################################################
# Extra Small Trees
# Assume 10000 trees are currently 20 ft tall.
trees<-rep(20,10000)
# Simulate sizes after a year
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
hist(trees2)
yearly.rate <- 2.5
growth<-gamma.MOM(yearly.rate,yearly.rate*0.4)
################################################################################
# Extra Small Trees
# Assume 10000 trees are currently 20 ft tall.
trees<-rep(20,10000)
# Simulate sizes after a year
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
hist(trees2)
# Create 6 stages for height
## Ex Small: < 21 ft, Small: 21-22 ft, Medium: 22-23 ft, Large: 23-25 ft,
## Ex Large: 25-26 ft, MEGA: > 27.
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
# How many trees in each size group
grp.tots<-as.data.frame(table(siz.grps))
# Proportion of trees in each size group
grp.props<-as.data.frame(prop.table(table(siz.grps)))
# Separate the groups
grow.trans<-grp.props
colnames(grow.trans)[2]<-"Ex Small"  ## rename column
grow.trans
################################################################################
# Small Trees
# Assume 10000 trees are currently 21.5 m (midpoint of small) tall
trees<-rep(21.5,10000)
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
grp.tots<-as.data.frame(table(siz.grps))
grp.props<-as.data.frame(prop.table(table(siz.grps)))
colnames(grp.props)[2] = "Small"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
# Fill in a zero in NA
grow.trans[is.na(grow.trans)] <-0
################################################################################
# Medium Trees
# Assume 10000 trees are currently 22.5 ft (midpoint of med) tall
trees<-rep(22.5,10000)
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
grp.tots<-as.data.frame(table(siz.grps))
grp.props<-as.data.frame(prop.table(table(siz.grps)))
colnames(grp.props)[2] = "Med"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
# Fill in a zero in NA
grow.trans[is.na(grow.trans)] <-0
trees<-rep(24,10000)
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
grp.tots<-as.data.frame(table(siz.grps))
grp.props<-as.data.frame(prop.table(table(siz.grps)))
colnames(grp.props)[2] = "Large"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
# Fill in a zero in NA
grow.trans[is.na(grow.trans)] <-0
################################################################################
# Ex Large Trees
trees<-rep(25.5,10000)
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
grp.tots<-as.data.frame(table(siz.grps))
grp.props<-as.data.frame(prop.table(table(siz.grps)))
colnames(grp.props)[2] = "Ex Large"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
# Fill in a zero in NA
grow.trans[is.na(grow.trans)] <-0
################################################################################
# Mega Trees
trees<-rep(27,10000)
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
grp.tots<-as.data.frame(table(siz.grps))
grp.props<-as.data.frame(prop.table(table(siz.grps)))
colnames(grp.props)[2] = "Mega"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
# Fill in a zero in NA
grow.trans[is.na(grow.trans)] <-0
grow.trans
################################################################################
# Now run for 10 time steps
grwthMX<-as.matrix(grow.trans[,-1])
grwthMX
tree.pop=NULL
# Vector of trees in each size class
pop.t<-c(5000,3000,2000,0)
tree.pop=NULL
for(year in 1:10){
Nt1= grwthMX %*% pop.t
tree.pop=c(tree.pop,sum(Nt1, na.rm=T))
# reassign pop at time t1 to time t
pop.t=Nt1
}
# Vector of trees in each size class
pop.t<-c(5000,3000,2000,0,0,0)
tree.pop=NULL
for(year in 1:10){
Nt1= grwthMX %*% pop.t
tree.pop=c(tree.pop,sum(Nt1, na.rm=T))
# reassign pop at time t1 to time t
pop.t=Nt1
}
tree.pop
grwthMX %*% pop.t
################################################################################
# Now run for 10 time steps
grwthMX<-as.matrix(grow.trans[,-1])
grwthMX
# Vector of trees in each size class
pop.t<-c(5000,3000,2000,0,0,0)
pop.t
grwthMX %*% pop.t
tree.pop=NULL
for(year in 1:10){
Nt1= grwthMX %*% pop.t
tree.pop=c(tree.pop,sum(Nt1, na.rm=T))
pop.t=Nt1
}
tree.pop
#Consider a simple population with age/ stage classes:
# per capita fecundity juvenile
Fj = 1.1
# per capita fecundity adult
Fa = 2.1
#survival age 0
S0 = 0.25
Sj = 0.35
#survival adult
Sa = 0.75
#We create the population transition matrix
trans.mtrx = matrix(c(0,Fj,Fa,S0,0,0,0,Sj,Sa), ncol = 3, byrow = T)
#print it out
trans.mtrx
#We create the population vector
#Number of animals in each age class
N0 = 100
Nj = 50
Na = 200
Nt = c(N0,Nj,Na)
## whats the population estimate for next year?
trans.mtrx %*% Nt
## object to hold annual population sizes
popn=NULL
# make an initial popn
Nt=round(c(runif(1,50,100),runif(1,30,80),runif(1,90,200)))
# now we model 20 time steps
for(year in 1: 20){
Nt1= trans.mtrx %*% Nt
popn=c(popn,sum(Nt1, na.rm=T))
# reassign pop at time t1 to time t
Nt=Nt1
}
popn
# Vector of trees in each size class
pop.t1<-c(5000,3000,2000,0,0,0)
# Combine 10 years
pop.t2<-grwTMX %*% pop.t1
pop.t3<-grwTMX %*% pop.t2
pop.t4<-grwTMX %*% pop.t3
pop.t5<-grwTMX %*% pop.t4
pop.t6<-grwTMX %*% pop.t5
################################################################################
# Now run for 10 time steps
grwthMX<-as.matrix(grow.trans[,-1])
# Vector of trees in each size class
pop.t1<-c(5000,3000,2000,0,0,0)
# Combine 10 years
pop.t2<-grwTMX %*% pop.t1
pop.t3<-grwTMX %*% pop.t2
# Part B.  ----------------------------------------------------------------
#' Create a stage transition matrix for modeling the growth of a
#' tree species (height) and run for 10 time steps. Height should have at least 6 stages
gamma.MOM<- function(meanz,sdz){
alpha<-(meanz/sdz)^2
beta<- (sdz^2)/meanz
return(c(alpha,beta)) }
yearly.rate <- 2.5
growth<-gamma.MOM(yearly.rate,yearly.rate*0.4)
################################################################################
# Extra Small Trees
# Assume 10000 trees are currently 20 ft tall.
trees<-rep(20,10000)
# Simulate sizes after a year
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
hist(trees2)
# Create 6 stages for height
## Ex Small: < 21 ft, Small: 21-22 ft, Medium: 22-23 ft, Large: 23-25 ft,
## Ex Large: 25-26 ft, MEGA: > 27.
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
# How many trees in each size group
grp.tots<-as.data.frame(table(siz.grps))
# Proportion of trees in each size group
grp.props<-as.data.frame(prop.table(table(siz.grps)))
# Separate the groups
grow.trans<-grp.props
colnames(grow.trans)[2]<-"Ex Small"  ## rename column
################################################################################
# Small Trees
# Assume 10000 trees are currently 21.5 ft (midpoint of small) tall
trees<-rep(21.5,10000)
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
grp.tots<-as.data.frame(table(siz.grps))
grp.props<-as.data.frame(prop.table(table(siz.grps)))
colnames(grp.props)[2] = "Small"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
# Fill in a zero in NA
grow.trans[is.na(grow.trans)] <-0
################################################################################
# Medium Trees
# Assume 10000 trees are currently 22.5 ft (midpoint of med) tall
trees<-rep(22.5,10000)
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
grp.tots<-as.data.frame(table(siz.grps))
grp.props<-as.data.frame(prop.table(table(siz.grps)))
colnames(grp.props)[2] = "Med"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
# Fill in a zero in NA
grow.trans[is.na(grow.trans)] <-0
trees<-rep(24,10000)
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
grp.tots<-as.data.frame(table(siz.grps))
grp.props<-as.data.frame(prop.table(table(siz.grps)))
colnames(grp.props)[2] = "Large"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
# Fill in a zero in NA
grow.trans[is.na(grow.trans)] <-0
################################################################################
# Ex Large Trees
trees<-rep(25.5,10000)
trees2<-trees + rgamma(10000,growth[1],scale=growth[2])
siz.grps<-ifelse(trees2 < 21,1,ifelse(trees2 < 22,2,
ifelse(trees2 < 23,3,
ifelse(trees2 < 25,4,ifelse(trees2 < 26,5,6)))))
grp.tots<-as.data.frame(table(siz.grps))
grp.props<-as.data.frame(prop.table(table(siz.grps)))
colnames(grp.props)[2] = "Ex Large"
grow.trans<-merge(grow.trans,grp.props, all = T)
grow.trans
# Fill in a zero in NA
grow.trans[is.na(grow.trans)] <-0
################################################################################
# Mega Trees
grow.trans<-cbind(grow.trans,Mega=c(0,0,0,1))
################################################################################
# Now run for 10 time steps
grwthMX<-as.matrix(grow.trans[,-1])
# Vector of trees in each size class
pop.t1<-c(5000,3000,2000,0,0,0)
# Combine 10 years
pop.t2<-grwTMX %*% pop.t1
# Combine 10 years
pop.t2<-grwthMX %*% pop.t1
grwthMX
################################################################################
# Mega Trees
grow.trans<-cbind(grow.trans,Mega=c(0,0,0,1))
grow.trans
################################################################################
# Mega Trees
grow.trans<-cbind(grow.trans,Mega=c(0,0,0,0,0,0,1))
grow.trans
################################################################################
# Mega Trees
grow.trans<-cbind(grow.trans,Mega=c(0,0,0,0,0,1))
grow.trans
################################################################################
# Now run for 10 time steps
grwthMX<-as.matrix(grow.trans[,-1])
# Vector of trees in each size class
pop.t1<-c(5000,3000,2000,0,0,0)
# Combine 10 years
pop.t2<-grwthMX %*% pop.t1
pop.t3<-grwthMX %*% pop.t2
pop.t4<-grwthMX %*% pop.t3
pop.t5<-grwthMX %*% pop.t4
pop.t6<-grwthMX %*% pop.t5
pop.t7<-grwthMX %*% pop.t6
pop.t8<-grwthMX %*% pop.t7
pop.t9<-grwthMX %*% pop.t8
pop.t10<-grwthMX %*% pop.t9
## now look at the changes at each time step.
round(cbind(pop.t1,pop.t2,pop.t3,pop.t4,pop.t5,pop.t6,pop.t7,
pop.t8,pop.t9,pop.t10))
# Set working directory here
setwd("C:/Users/bankh/My_Repos/habor-seal/data")
# Retrieve data
m.data<-read.csv("m.data.csv")
require(glmmTMB) # for glmm
require(DHARMa) # auto cor and zero-inflation
# Combine location avg noise and total seals within dates
new.w.data<-read.csv("new.w.data.csv")
# Fix date
new.w.data$date<-as.Date(as.character(new.w.data$date),format = "%m/%d/%Y")
m.data$date<-as.Date(as.character(m.data$date),format = "%m/%d/%Y")
new.w.data$j.date<- as.integer(new.w.data$j.date)
new.w.data$j.date<- ifelse(new.w.data$j.date == min(new.w.data$j.date),0, new.w.data$j.date-min(new.w.data$j.date))
m.data$j.date<- as.integer(m.data$j.date)
m.data$j.date<- ifelse(m.data$j.date == min(m.data$j.date),0, m.data$j.date-min(m.data$j.date))
new.w.data$year <-as.numeric(format(new.w.data$date, format = "%Y"))
m.data$year <-as.numeric(format(m.data$date, format = "%Y"))
# Add sample ID
new.w.data$id<- seq_along(new.w.data[,1])
m.data$id<- seq_along(m.data[,1])
# Merge data
full.data<-merge(new.w.data,m.data,all = T)
full.data$site<- as.numeric(full.data$site=="waterfront")
## Organize data by id
full.data<- full.data[order(full.data$id), ]
full.data$obs_id<- seq_along(full.data[,1])
full.data<- full.data[order(full.data$obs_id), ]
# Run glmmTMB
model0<- glmmTMB(seals ~ 1, data = full.data,
family = nbinom2, zi = ~ 1)
model1<- glmmTMB(seals ~ noise*site + tide + time + (1 | date) +
ar1(as.factor(month) + 0 | year), data = full.data,
family = nbinom2, zi = ~ 1)
model2<- glmmTMB(seals ~ noise*site +  (1 | date) + time +
ar1(as.factor(month) + 0 | year), data = full.data,
family = nbinom2, zi = ~ 1)
model3<- glmmTMB(seals ~ noise*site + (1 | date) +
ar1(as.factor(month) + 0 | year), data = full.data,
family = nbinom2, zi = ~ 1)
model3<- glmmTMB(seals ~ noise+site + (1 | date) +
ar1(as.factor(month) + 0 | year), data = full.data,
family = nbinom2, zi = ~ 1)
# Create list
models<-list(model0, model1, model2, model3, model4)
model3<- glmmTMB(seals ~ noise*site + (1 | date) +
ar1(as.factor(month) + 0 | year), data = full.data,
family = nbinom2, zi = ~ 1)
model4<- glmmTMB(seals ~ noise+site + (1 | date) +
ar1(as.factor(month) + 0 | year), data = full.data,
family = nbinom2, zi = ~ 1)
# Create list
models<-list(model0, model1, model2, model3, model4)
## Calculate AICc with glm of models
Modnames<- c("seals ~ 1",
"seals ~ site*noise + tide + time",
"seals ~ site*noise + time",
"seals ~ site*noise",
"seals ~ site+noise")
aictable<- aictab(models, modnames = Modnames,
second.ord = TRUE,
nobs = NULL, c.hat = 1) # Looks like site*noise are the best predictors
require(AICcmodavg) #for AICc
aictable<- aictab(models, modnames = Modnames,
second.ord = TRUE,
nobs = NULL, c.hat = 1) # Looks like site*noise are the best predictors
aictable
